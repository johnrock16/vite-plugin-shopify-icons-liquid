import fs from 'fs';
import path from 'path';
import { optimize } from 'svgo';
import chalk from 'chalk';

const DEFAULT_OPTIONS = {
  inputDirectory: './assets',
  outputFile: './snippets/icon.liquid',
  outputFileJSON: '',
  flattenFolders: true,
  verbose: true,
  svgoConfig: {
    multipass: true,
    plugins: [
      { name: 'preset-default' },
      'removeViewBox'
    ]
  }
};

export default function VitePluginShopifyIcons(userOptions = {}) {
  const options = { ...DEFAULT_OPTIONS, ...userOptions };
  const { inputDirectory, outputFile, flattenFolders, verbose, outputFileJSON, svgoConfig } = options;

  const cache = new Map();
  let rebuildTimeout;

  function log(message, color = 'green') {
    if (verbose) console.log(chalk[color](`[vite-plugin-shopify-icons] ${message}`));
  }

  function getAllSvgFiles(dir) {
    const files = [];
    for (const item of fs.readdirSync(dir)) {
      const fullPath = path.join(dir, item);
      const stats = fs.statSync(fullPath);
      if (stats.isDirectory()) {
        files.push(...getAllSvgFiles(fullPath));
      } else if (item.endsWith('.svg')) {
        files.push(fullPath);
      }
    }
    return files;
  }

  function buildIconSnippet() {
    if (!fs.existsSync(inputDirectory)) {
      log(`Input directory not found: ${inputDirectory}`, 'yellow');
      return;
    }

    const svgFiles = flattenFolders
      ? getAllSvgFiles(inputDirectory)
      : fs.readdirSync(inputDirectory)
          .filter(f => f.endsWith('.svg'))
          .map(f => path.join(inputDirectory, f));

    const icons = [];

    for (const inputPath of svgFiles.sort()) {
      const fileName = path.basename(inputPath, '.svg');
      const relativeName = flattenFolders
        ? path.relative(inputDirectory, inputPath).replace(/\.svg$/, '').replace(/[\\/]/g, '-')
        : fileName;

      const stats = fs.statSync(inputPath);
      const mtime = stats.mtimeMs;

      if (cache.get(relativeName) === mtime) continue;
      cache.set(relativeName, mtime);

      const rawFile = fs.readFileSync(inputPath, 'utf8');
      const optimized = optimize(rawFile, { path: inputPath, ...svgoConfig });
      icons.push({ name: relativeName, svg: optimized.data });
    }

    if (icons.length === 0) {
      log('No updated icons found, skipping regeneration.', 'gray');
      return;
    }

    const lines = [];
    lines.push(`{% comment %} Auto-generated by vite-plugin-shopify-icons {% endcomment %}
{% comment %}
  Renders an icon
  Accepts:
    - name: Icon file name (required)
    - class: icon classes
    - fill: Icon color fill
    - width: Icon width
    - height: Icon height
    - label: Icon aria label
    - role: Icon role
    - containerAttributes: Extra attributes for svg container
    - iconAttributes: Extra attributes for svg element
  Usage:
    {% render 'icon', name: 'icon-cart', class: 'icon--md', fill: 'red', label: 'cart button', role: 'button'%}
{% endcomment %}`);

    lines.push(`
{% assign icon_class = "icon icon-" | append: name | replace: 'icon-icon-', 'icon-' %}
{% assign icon_fill = fill | default: "currentColor" %}
{% assign icon_extra_class = class | default: "" %}
{% assign icon_label = label | default: name %}
{% assign icon_role = role | default: "" %}
{% assign icon_width = width | default: "" %}
{% assign icon_height = height | default: "" %}
{% assign icon_container_attributes = containerAttributes | default: "" %}
{% assign icon_attributes = iconAttributes | default: "" %}
{% case name %}
`);

    for (const icon of icons) {
      const svg = icon.svg
        .replace(/<svg([^>]*)>/, `<svg$1 role="{{ icon_role }}" {% if width != blank %}width="{{ icon_width }}"{% endif %} {% if height != blank %}height="{{ icon_height }}"{% endif %} fill="{{ icon_fill }}" aria-label="{{ icon_label }}" {{ icon_attributes }}>`)
        .replace(/\n/g, '')
        .trim();

      lines.push(`  {% when "${icon.name}" %}
  <div class="{{ icon_class }} {{ icon_extra_class }}" style="display:inline;color:{{ icon_fill }}" {{ icon_container_attributes }}>
    ${svg}
  </div>`);
    }

    lines.push('{% endcase %}');

    fs.mkdirSync(path.dirname(outputFile), { recursive: true });
    fs.writeFileSync(outputFile, lines.join('\n'), 'utf8');
    log(`Generated snippet with ${icons.length} icons → ${outputFile}`);

    if (outputFileJSON) {
      const list = Array.from(cache.keys()).sort();
      fs.writeFileSync(outputFileJSON, JSON.stringify({ icons: list }, null, 2), 'utf8');
      log(`Generated icon list → ${outputFileJSON}`);
    }
  }

  function debouncedBuild() {
    clearTimeout(rebuildTimeout);
    rebuildTimeout = setTimeout(buildIconSnippet, 250);
  }

  return {
    name: 'vite-plugin-shopify-icons-liquid',
    enforce: 'pre',

    configResolved(config) {
      if (config.command === 'build') buildIconSnippet();
    },

    configureServer(server) {
      if (!fs.existsSync(inputDirectory)) return;
      log(`Watching ${inputDirectory} for SVG changes...`);
      server.watcher.add(inputDirectory);
      server.watcher.on('change', (filePath) => {
        if (filePath.endsWith('.svg')) {
          log(`Detected change in: ${filePath}`, 'cyan');
          debouncedBuild();
        }
      });
    },

    buildStart() {
      buildIconSnippet();
    },
  };
}
